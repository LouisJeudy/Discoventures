# Definition des stages
stages:
    # - lint # Différents job de vérification HTML, CSS et Javascript et React
    # - test # stage de test Backend & Frontend
    # - documentation # Générer la documentation Swagger
    # - deploy # Intégration du backend sur le cloud Scalingo
    - production # Générer l'application

# # Job pour effectuer une analyse syntaxique des fichiers Javascript
# lintjs_backend:
#     tags:
#       - docker
#     stage: lint
#     image: node
#     script:
#       - npm --prefix ./backendsqlite/ i  # Installe ce qui est décrit dans package.json
#       - npx eslint ./backendsqlite/src

# # Job pour effectuer une analyse syntaxique du frontend
# lintjs_frontend:
#     tags:
#       - docker
#     stage: lint
#     image: node
#     script:
#       - npm --prefix ./frontend/Discoventures/ i
#       - npx eslint ./frontend/Discoventures/src/app/**
#       - npx eslint ./frontend/Discoventures/src/components/**

# # Exécution des tests Cypress
# jobcypress:
#   tags:
#      - docker  
#      - perso # Runner personnel
#   stage: test
#   image: cypress/base:16.18.1 # Image fournie par cypress avec ce qu'il faut
#   script:
#      - npm --prefix ./frontend/Discoventures i # Installe ce qui est décrit dans package.json
#      - cd ./frontend/Discoventures
#      - npm i -g wait-on # paquet permettant d'attendre le lancement du serveur web
#      - npm run web &
#      - wait-on http://localhost:19006/
#      - npx cypress run  # Lancer les tests

# # Job pour exécuter les tests de l'API Jest
# jest:
#   tags:
#     - docker  # Comme on utilise une image pour isoler on doit utiliser un runner docker 
#   stage: test
#   image: node
#   script:
#     - npm --prefix ./backendsqlite/ i
#     - npm run --prefix ./backendsqlite/ test

# swagger:
#   tags:
#     - docker  
#   stage: documentation
#   image: node
#   script:
#     - npm --prefix ./backendsqlite/ i # Installe ce qui est décrit dans package.json
#     - npm run --prefix ./backendsqlite/ doc
#   only: # Règles pour choisir la branche devant exécuter ce job (lors de commits ou de merge)
#     refs:
#       - main
#       - develop

# # Job pour exposer l'API sur Scalingo
# #URL d'exposition de l'API : https://discoventures.osc-fr1.scalingo.io
# scalingo:
#   stage: deploy
#   tags:
#     - docker
#   variables:
#     SCALINGO_APP_NAME: discoventures # nom d'application sur scalingo
#     SCALINGO_REGION: osc-fr1 # l'instance de scalingo sur laquelle votre appli est déployée
#     GIT_DEPTH: 0
#     PROJECT_DIR: backendsqlite # Le répertoire dans le dépôt où est le backend
#   image: ruby:3.1.3
#   script:
#     - gem install dpl --pre # gem est le gestionnaire de paquets pour Ruby
#     - dpl --provider=scalingo --app=$SCALINGO_APP_NAME --api-token=$SCALINGO_API_TOKEN --region=$SCALINGO_REGION --branch=refs/heads/main
#   only: # Règles pour choisir la branche devant exécuter ce job (lors de commits ou de merge)
#     refs:
#       - main

# Générer l'APK de l'application
generate_APK:
  tags:
    - docker
  stage: production
  image: sebastienviardot/rnenvsv:buster
  script:
  - cd ./frontend/Discoventures/
  - chmod +x ./generateapk.sh
  - ./generateapk.sh
  artifacts:
    paths:
      - frontend/Discoventures/public
  # only: # Règles pour choisir la branche devant exécuter ce job (lors de commits ou de merge)
  #   refs:
  #     - main